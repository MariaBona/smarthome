syntax = "proto3";

package smarthome;

// Collects information about devices connected to the system
service RegistryService {
    rpc register(RegisterRequest) returns (RegisterResponse) {} // Register a device in the system
}

// Device enum is used to distinguish device types
enum DeviceType {
    DEVICE_UNKNOWN = 0; // Device type not set
    DEVICE_THERMOSTAT = 1; // Thermostat device
    DEVICE_SWITCH = 2; // Light Switch
    DEVICE_LIGHT = 3; // Smart Lights
}

message RegisterRequest {
    string name = 1; // Requested name set to a thermostat client
    DeviceType type = 2; // what kind of device the client device is
}

message RegisterResponse {
    string new_name = 1; // New name to distinguish between different devices of the same type
    uint32 id = 2; // individual id of the client device in the smarthome
    map<uint32,DeviceType> devices = 3; // list of all devices connected to the system (id, type)
}

// Allows for device status updates and status subscriptions
service StatusService {
    rpc status(stream StatusRequest) returns (stream StatusResponse) {} // bi-directional stream device status and controller commands
    // Client side stream events
    rpc publish(stream PublishRequest) returns (PublishResponse) {}
    // Server side stream other device status when subscribed.
    // Devices can subscribe to status of other devices on the system
    rpc subscribe(SubscribeRequest) returns (stream SubscribeResponse) {}
}

// Stream device status
message StatusRequest {
    uint32 id = 1;
    string name = 2;
    DeviceType type = 3;
    map<string,string> status = 4; // this will have a device specific device values and properties
}
// Stream device commands from controller
message StatusResponse {
    map<string,string> commands = 1; // pending commands from the controller relayed to the client
}

message PublishRequest {
    uint32 id = 1;
    map<string,string> event = 2;
}

message PublishResponse {}

message SubscribeRequest {
    uint32 id = 1; // id of the device we want to subscribe to its status updates
}

message SubscribeResponse {
    uint32 id = 1;
    map<string,string> status = 2;
}

// Thermostat device/service
service ThermostatService {
    rpc setTemp(SetTempRequest) returns (SetTempResponse) {} // Unary gRPC service to set target temperature
}

// Main Controller can request target temperature on a thermostat device
message SetTempRequest {
    uint32 id = 1;
    double temperature = 2;
}

// Response to SetTempRequest
message SetTempResponse {}
